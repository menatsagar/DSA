# https://leetcode.com/problems/continuous-subarray-sum/description/
"""
Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

A good subarray is a subarray where:

its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:

A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
Example 2:

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
Example 3:

Input: nums = [23,2,6,4,7], k = 13
Output: false
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= sum(nums[i]) <= 231 - 1
1 <= k <= 231 - 1
"""
test_list = [202,57,424,424,334,302,67,330,172,144,137,473,335,431,324,430,199,205,464,487,15,448,514,253,505,489,194,122,382,523,410,172,160,296,179,403,43,6,25,380,483,16,438,503,515,91,229,118,289,247,222,142,73,277,437,148,274,142,2,303,174,463,482,114,98,26,238,469,174,52,328,192,266,202,106,435,374,340,270,117,205,290,167,102,321,452,460,446,471,184,56,21,433,278,402,493,517,315,110,235,240,178,272,212,296,376,163,446,220,92,224,470,195,150,20,402,390,346,48,217,292,432,474,361,223,303,432,153,519,324,105,269,193,478,266,177,102,473,27,375,92,359,433,206,455,159,105,231,489,487,52,280,444,103,39,179,407,375,257,39,82,448,360,383,353,189,429,118,329,421,319,327,253,514,323,286,171,139,448,191,409,432,231,267,251,4,118,501,149,429,487,9,280,221,252,437,171,363,315,236,72,88,231,149,319,50,317,204,438,396,265,30,172,321,210,74,165,239,277,128,318,362,140,407,39,292,108,449,87,271,470,71,32,109,187,399,479,420,521,472,256,15,431,76,153,80,16,227,284,166,424,244,526,32,303,250,392,480,476,460,205,217,19,352,229,249,109,85,454,494,207,499,422,78,388,517,345,497,444,116,359,101,432,88,117,191,507,316,425,402,334,118,24,507,347,357,443,179,41,82,239,109,135,186,152,277,463,459,64,241,214,316,153,264,423,290,473,46,374,197,344,140,422,57,148,489,514,231,153,122,161,208,299,172,415,388,458,317,79,73,489,402,425,172,355,195,383,243,520,310,464,244,466,340,254,358,99,142,19,7,387,390,509,436,216,292,91,506,164,315,441,456,38,311,270,358,2,495,446,117,526,347,525,495,512,57,18,474,337,513,497,458,186,284,77,221,5,95,102,377,151,215,100,374,400,441,401,490,117,148,356,121,430,217,194,21,440,375,312,165,480,251,383,497,120,140,10,270,263,257,328,439,150,256,268,273,344,378,505,223,108,13,29,224,199,471,339,423,191,415,309,103,111,325,358,159,165,150,282,516,34,144,390,524,356,151,366,163,116,60,495,82,24,498,281,326,397,174,333,216,345,363,356,266,328,247,343,356,380,304,457,207,133,201,519,351,153,56,61,187,431,176,360,406,162,454,356,221,189,388,335,254,377,127,268,43,271,450,324,393,126,454,137,446,243,444,101,364,213,393,30,146,41,233,332,313,227,228,187,365,425,316,371,405,72,240,322,204,415,112,387,305,7,460,476,423,167,522,264,448,134,451,215,300,410,32,44,65,5,237,507,100,224,318,61,188,434,412,7,322,508,206,395,336,242,420,370,113,151,314,283,383,325,437,7,254,301,477,459,361,23,133,207,486,178,138,3,171,288,451,80,63,368,193,387,16,153,245,406,191,265,321,248,378,382,281,405,346,420,496,238,407,13,53,329,148,146,494,67,2,325,243,28,475,290,231,71,365,130,313,46,60,434,345,439,57,192,87,162,311,408,113,251,242,92,135,365,145,150,181,192,197,343,86,519,470,1,277,266,458,249,113,315,292,220,381,108,125,405,333,130,252,221,306,446,235,83,423,11,382,448,296,342,108,433,250,162,359,184,288,260,287,174,256,330,299,199,162,45,68,293,139,193,86,2,265,204,205,230,485,472,319,409,470,362,82,59,183,265,40,244,318,121,444,84,367,241,140,62,123,465,495,105,205,254,349,360,409,112,80,91,475,418,325,106,161,384,116,253,199,182,482,495,495,69,205,100,461,94,271,361,272,146,373,296,24,42,102,511,182,461,34,417,155,398,134,445,150,342,192,110,322,113,91,457,446,269,336,171,350,8,64,97,89,82,488,307,445,152,64,32,18,63,478,521,246,166,23,387,253,190,373,193,374,426,129,118,66,85,394,460,220,298,521,282,324,486,416,4,155,1,326,191,509,271,190,240,151,336,144,292,95,20,70,256,199,232,338,84,227,112,299,173,333,86,25,436,120,463,1,319,482,464,129,36,472,160,71,67,129,173,332,479,367,393,43,488,380,449,472,216,291,136,332,231,431,30,348,16,344,445,481,182,42,166,431,184,55,372,162,341,478,54,325,137,281,85,243,193,412,245,392,348,451,36,276,258,178,156,165,514,200,369,409,135,493,320,300,368,360,140,249,469,436,10,273,253,315,393,108,173,297,302,445,32,110,244,494,176,263,439,114,62,147,320,25,484,422,488,222,26,192,432,321,120,322,502,47,117,207,433,108,439,119,455,103,33,294,194,224]
k = 787392336
class Solution(object):
    def checkSubarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        if len(nums)<2:
            return False
        
        prefix_sum = []
        prefix_sum.append(nums[0])
        for i in range(1, len(nums)):
            prefix_sum.append(prefix_sum[i-1] + nums[i])
           
  
        index = 0
     
        for i in nums:
            j_index = index+1
            lst = nums[index+1::]
            
            for j in lst:
                if index == 0 and (prefix_sum[j_index]%k == 0):
                    return True
                    
                elif index!=0 and  ((prefix_sum[j_index]-prefix_sum[index-1])%k == 0):
                    return True
                j_index+=1
            index+=1
        return False


# this two loop approach is timed out for test_list



### optimized


class Solution:
    def checkSubarraySum(self, nums: list[int], k: int) -> bool:
        prefix_sum = 0
        index = 0
        prefix_dict = {0:-1}
        for num in nums:
            prefix_sum += num
            if k !=0:
                prefix_sum  = prefix_sum % k
            
            if prefix_sum not in prefix_dict:
                prefix_dict[prefix_sum] = index
            elif (index-prefix_dict[prefix_sum]>1):
                return True
            index+=1

        return False
                
p = Solution()
print(p.checkSubarraySum([23,2,6,4,7], 5))
